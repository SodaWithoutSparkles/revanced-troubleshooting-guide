# ReVanced Version Update Workflow
name: Update ReVanced Versions

on:
  workflow_dispatch:
    inputs:
      force_update:
        description: 'Force update even if no changes detected'
        required: false
        default: false
        type: boolean
  schedule:
    # Run every 30 minutes
    - cron: '*/30 * * * *'

jobs:
  update-versions:
    # Only run on main branch to prevent duplicate runs
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
    
    outputs:
      modified: ${{ steps.updater.outputs.modified }}
      youtube_version: ${{ steps.updater.outputs.youtube_version }}
      last_update: ${{ steps.updater.outputs.last_update }}
      update_reason: ${{ steps.updater.outputs.update_reason }}
      files_updated: ${{ steps.updater.outputs.files_updated }}
      total_replacements: ${{ steps.updater.outputs.total_replacements }}
      needs_rebuild: ${{ steps.updater.outputs.modified }}
      patches_version: ${{ steps.updater.outputs.patches_version }}
      yt_updated: ${{ steps.updater.outputs.yt_updated }}
      update_failed: ${{ steps.updater.outcome == 'failure' }}

    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: pip install -r python/requirements.txt
    
    - name: Configure Git
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
    
    - name: Run version updater
      id: updater
      continue-on-error: true
      run: |
        if [ "${{ github.event.inputs.force_update }}" = "true" ]; then
          FORCE=1 python3 python/new_update_versions.py
        else
          python3 python/new_update_versions.py
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        EVENT: ${{ github.event_name }}
    
    - name: Summary
      run: |
        echo "### Update Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Patches Version:** ${{ steps.updater.outputs.patches_version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Modified:** ${{ steps.updater.outputs.modified }}" >> $GITHUB_STEP_SUMMARY
        echo "- **YouTube Version:** ${{ steps.updater.outputs.youtube_version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Last Update:** ${{ steps.updater.outputs.last_update }}" >> $GITHUB_STEP_SUMMARY
        if [ "${{ steps.updater.outputs.modified }}" = "true" ]; then
          echo "- **Update Reason:** ${{ steps.updater.outputs.update_reason }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Files Updated:** ${{ steps.updater.outputs.files_updated }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Total Replacements:** ${{ steps.updater.outputs.total_replacements }}" >> $GITHUB_STEP_SUMMARY
        else
          echo "- **Reason:** ${{ steps.updater.outputs.update_reason }}" >> $GITHUB_STEP_SUMMARY
        fi

  # Trigger website rebuild if changes were made
  trigger-rebuild:
    needs: update-versions
    if: needs.update-versions.outputs.modified == 'true'
    permissions:
      contents: write
    uses: ./.github/workflows/retype-action.yml
    secrets: inherit

  notify-patches-update:
    needs: [update-versions, trigger-rebuild]
    if: needs.update-versions.outputs.update_reason == 'patches_updated' && !failure()
    uses: ./.github/workflows/notify-patches-update.yml
    secrets: inherit
    with:
      patches_version: ${{ needs.update-versions.outputs.patches_version }}
  
  notify-youtube-update:
    needs: [update-versions, trigger-rebuild]
    if: needs.update-versions.outputs.yt_updated == 'true' && !failure()
    uses: ./.github/workflows/notify-youtube-update.yml
    secrets: inherit
    with:
      youtube_version: ${{ needs.update-versions.outputs.youtube_version }}

  # Handle failures
  handle-failure:
    needs: update-versions
    if: always() && (needs.update-versions.result == 'failure' || needs.update-versions.outputs.update_failed == 'true')
    runs-on: ubuntu-latest
    permissions:
      issues: write
    steps:
    - name: Create failure issue
      uses: actions/github-script@v7
      with:
        script: |
          const title = 'ðŸš¨ ReVanced Version Update Failed';
          const body = `The automated ReVanced version update workflow failed.
          
          **Details:**
          - Run ID: [${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          - Event: ${{ github.event_name }}
          - Branch: ${{ github.ref_name }}
          - Timestamp: ${new Date().toISOString()}
          
          Please check the workflow logs for detailed error information.`;
          
          // Look for existing open failure issues
          const issues = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            labels: ['automation', 'version-update-failed'],
            state: 'open'
          });
          
          if (issues.data.length === 0) {
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['bug', 'automation', 'version-update-failed']
            });
          }
  notify-failure:
    needs: handle-failure
    if: always() && needs.handle-failure.result == 'success'  
    uses: ./.github/workflows/discord-update-owner.yml
    secrets: inherit
    with:
      title: "ðŸš¨ ReVanced Update Failed"
      content: "The version update workflow encountered an error in run #${{ github.run_id }}. Please check the logs for details."
      url: "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
      message: "ReVanced version update workflow failed - please investigate!"
